export * from './logger.js';
export * from './currency/index.js';
export * from './offensive.js';
export * from './file.js';
export * from './dir.js';
export * from './path.js';
export * from './project.js';
export * from './kev.js';
declare const _default: {
    logger: {
        wait: typeof import("./logger.js").wait;
        error: typeof import("./logger.js").error;
        warn: typeof import("./logger.js").warn;
        ready: typeof import("./logger.js").ready;
        info: typeof import("./logger.js").info;
        success: typeof import("./logger.js").success;
        event: typeof import("./logger.js").event;
        trace: typeof import("./logger.js").trace;
        warnOnce: typeof import("./logger.js").warnOnce;
        time: typeof import("./logger.js").time;
        timeEnd: typeof import("./logger.js").timeEnd;
        bootstrap: typeof import("./logger.js").bootstrap;
        createLogger: typeof import("./logger.js").createLogger;
        colors: {
            bold: (str: string) => string;
            dim: (str: string) => string;
            red: (str: string) => string;
            green: (str: string) => string;
            yellow: (str: string) => string;
            blue: (str: string) => string;
            magenta: (str: string) => string;
            cyan: (str: string) => string;
            white: (str: string) => string;
            gray: (str: string) => string;
            purple: (str: string) => string;
            bgRed: (str: string) => string;
            bgGreen: (str: string) => string;
            bgYellow: (str: string) => string;
            bgBlue: (str: string) => string;
            bgMagenta: (str: string) => string;
            bgCyan: (str: string) => string;
            bgWhite: (str: string) => string;
        };
    };
    currency: {
        getSymbol: typeof import("./currency/index.js").getSymbol;
        getOptimalDecimals: typeof import("./currency/index.js").getOptimalDecimals;
        isCrypto: typeof import("./currency/index.js").isCrypto;
        isStablecoin: typeof import("./currency/index.js").isStablecoin;
        isFiat: typeof import("./currency/index.js").isFiat;
        percentageOf: typeof import("./currency/index.js").percentageOf;
        percentageChange: typeof import("./currency/index.js").percentageChange;
        percentageDiff: typeof import("./currency/index.js").percentageDiff;
        basisPointsToPercent: typeof import("./currency/index.js").basisPointsToPercent;
        percentToBasisPoints: typeof import("./currency/index.js").percentToBasisPoints;
        formatBasisPoints: typeof import("./currency/index.js").formatBasisPoints;
        symbols: {
            readonly BTC: "₿";
            readonly XBT: "₿";
            readonly ETH: "Ξ";
            readonly USD: "$";
            readonly EUR: "€";
            readonly GBP: "£";
            readonly JPY: "¥";
            readonly CNY: "¥";
            readonly KRW: "₩";
            readonly INR: "₹";
            readonly RUB: "₽";
            readonly TRY: "₺";
            readonly AUD: "A$";
            readonly CAD: "C$";
            readonly CHF: "Fr";
            readonly HKD: "HK$";
            readonly SGD: "S$";
            readonly NZD: "NZ$";
            readonly SEK: "kr";
            readonly NOK: "kr";
            readonly DKK: "kr";
            readonly PLN: "zł";
            readonly THB: "฿";
            readonly USDT: "₮";
            readonly USDC: "$";
            readonly DAI: "$";
            readonly BUSD: "$";
        };
    };
    offensive: {
        assert: typeof import("./offensive.js").assert;
        must: typeof import("./offensive.js").must;
        check: typeof import("./offensive.js").check;
        panic: typeof import("./offensive.js").panic;
    };
    file: {
        getCallerUrl(): string | undefined;
        read(filePath: string): Buffer;
        readText(filePath: string, encodingOrUrl?: BufferEncoding | string, encoding?: BufferEncoding): string;
        write(filePath: string, data: string | Buffer): void;
        exists(filePath: string): boolean;
        remove(path: string): void;
        size(path: string): number;
        mtime(path: string): Date;
    };
    File: {
        getCallerUrl(): string | undefined;
        read(filePath: string): Buffer;
        readText(filePath: string, encodingOrUrl?: BufferEncoding | string, encoding?: BufferEncoding): string;
        write(filePath: string, data: string | Buffer): void;
        exists(filePath: string): boolean;
        remove(path: string): void;
        size(path: string): number;
        mtime(path: string): Date;
    };
    dir: {
        create(path: string): void;
        exists(path: string): boolean;
        remove(path: string): void;
        list(path: string): string[];
        listFull(dirPath: string): string[];
        listDirs(path: string): string[];
        listFiles(path: string): string[];
        isEmpty(path: string): boolean;
    };
    Dir: {
        create(path: string): void;
        exists(path: string): boolean;
        remove(path: string): void;
        list(path: string): string[];
        listFull(dirPath: string): string[];
        listDirs(path: string): string[];
        listFiles(path: string): string[];
        isEmpty(path: string): boolean;
    };
    path: {
        resolve(targetPath: string, baseUrl?: string): string;
        join(...segments: string[]): string;
        dirname(p: string): string;
        basename(p: string, ext?: string): string;
        extname(p: string): string;
        parse(p: string): {
            root: string;
            dir: string;
            base: string;
            ext: string;
            name: string;
        };
        isAbsolute(p: string): boolean;
        relative(from: string, to: string): string;
        fromFileUrl(url: string): string;
        dirnameFromUrl(url: string): string;
        absolute(...segments: string[]): string;
        cwd(): string;
    };
    Path: {
        resolve(targetPath: string, baseUrl?: string): string;
        join(...segments: string[]): string;
        dirname(p: string): string;
        basename(p: string, ext?: string): string;
        extname(p: string): string;
        parse(p: string): {
            root: string;
            dir: string;
            base: string;
            ext: string;
            name: string;
        };
        isAbsolute(p: string): boolean;
        relative(from: string, to: string): string;
        fromFileUrl(url: string): string;
        dirnameFromUrl(url: string): string;
        absolute(...segments: string[]): string;
        cwd(): string;
    };
    project: {
        findProjectRoot: typeof import("./project.js").findProjectRoot;
        findProjectRootFrom: typeof import("./project.js").findProjectRootFrom;
        findMonorepoRoot: typeof import("./project.js").findMonorepoRoot;
        findMonorepoRootFrom: typeof import("./project.js").findMonorepoRootFrom;
        getPackageJson: typeof import("./project.js").getPackageJson;
        isTypeScriptProject: typeof import("./project.js").isTypeScriptProject;
    };
    KEV: import("./kev.js").KevOps;
    kev: import("./kev.js").KevOps;
};
export default _default;
//# sourceMappingURL=index.d.ts.map