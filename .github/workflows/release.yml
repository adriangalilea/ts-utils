name: NPM CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - uses: pnpm/action-setup@v4
      with:
        version: 9
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "pnpm"
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run type check
      run: pnpm run type-check || pnpm run typecheck || npx tsc --noEmit
      continue-on-error: false
    
    - name: Run linter
      run: pnpm run lint
      
    - name: Run tests
      run: pnpm test --if-present
      
    - name: Build package
      run: pnpm run build

  publish:
    needs: lint
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: pnpm/action-setup@v4
        with:
          version: 9
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          registry-url: "https://registry.npmjs.org"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build package
        run: pnpm run build
        
      - name: Extract package info
        id: package
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          VERSION=$(node -p "require('./package.json').version")
          
          echo "name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package: $PACKAGE_NAME@$VERSION"
          
      - name: Check if version exists on npm
        id: check
        run: |
          PACKAGE_NAME="${{ steps.package.outputs.name }}"
          VERSION="${{ steps.package.outputs.version }}"
          
          # Check if package exists and if this version is published
          if npm view "$PACKAGE_NAME@$VERSION" version 2>/dev/null; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Version $VERSION already exists on npm"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Version $VERSION not on npm, will publish"
          fi
        
      - name: Publish to npm
        if: steps.check.outputs.exists == 'false'
        run: |
          # Configure npm for publishing
          npm config set //registry.npmjs.org/:_authToken=$NODE_AUTH_TOKEN
          
          # Check if it's a scoped package
          if [[ "${{ steps.package.outputs.name }}" == @* ]]; then
            # For scoped packages, ensure public access if not private
            IS_PRIVATE=$(node -p "require('./package.json').private || false")
            if [ "$IS_PRIVATE" = "false" ]; then
              pnpm publish --access public --no-git-checks
            else
              pnpm publish --no-git-checks
            fi
          else
            pnpm publish --no-git-checks
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        
      - name: Create git tag
        if: steps.check.outputs.exists == 'false'
        run: |
          VERSION="${{ steps.package.outputs.version }}"
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Check for cliff.toml
        if: steps.check.outputs.exists == 'false'
        id: check-cliff
        run: |
          if [ -f .github/cliff.toml ]; then
            echo "has_cliff=true" >> $GITHUB_OUTPUT
          else
            echo "has_cliff=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate Changelog
        if: steps.check.outputs.exists == 'false' && steps.check-cliff.outputs.has_cliff == 'true'
        id: git-cliff
        uses: orhun/git-cliff-action@v4
        with:
          config: .github/cliff.toml
          args: --latest
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}
      
      - name: Create GitHub Release
        if: steps.check.outputs.exists == 'false' && steps.check-cliff.outputs.has_cliff == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package.outputs.version }}
          body: ${{ steps.git-cliff.outputs.content }}
          draft: false
          prerelease: false